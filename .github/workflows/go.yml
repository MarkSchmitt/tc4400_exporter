name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [published]

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Test
      run: go test -v .

    - name: Build and Push Docker Images
      run: |
        export OWNER=$(echo ${{ github.repository }} | sed 's#/.*##')
        export REPO=$(echo "docker.pkg.github.com/${{ github.repository }}/prometheus_exporter" | sed -e 's/\(.*\)/\L\1/')
        docker login docker.pkg.github.com -u ${OWNER} -p ${{ secrets.GITHUB_TOKEN }}
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -tags netgo -ldflags '-w' 
        docker build -t ${REPO}:${{ github.sha }}-amd64 .
        docker push ${REPO}:${{ github.sha }}-amd64
        CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -a -tags netgo -ldflags '-w' 
        docker build -t ${REPO}:${{ github.sha }}-arm64v8 .
        docker push ${REPO}:${{ github.sha }}-arm64v8
        CGO_ENABLED=0 GOOS=linux GOARCH=arm go build -a -tags netgo -ldflags '-w' 
        docker build -t ${REPO}:${{ github.sha }}-arm32 .
        docker push ${REPO}:${{ github.sha }}-arm32

        export DOCKER_CLI_EXPERIMENTAL=enabled 
        export REF=$(echo ${{ github.ref }} | sed 's#refs/.*/##')
        echo docker manifest create ${REPO}:${{ github.sha }} ${REPO}:${{ github.sha }}-amd64 ${REPO}:${{ github.sha }}-arm64v8 ${REPO}:${{ github.sha }}-arm32
        abc
        docker manifest annotate ${REPO}:${{ github.sha }} ${REPO}:${{ github.sha }}-arm32 --os linux --arch arm --variant v6
        docker manifest annotate ${REPO}:${{ github.sha }} ${REPO}:${{ github.sha }}-arm32 --os linux --arch arm --variant v7
        docker manifest annotate ${REPO}:${{ github.sha }} ${REPO}:${{ github.sha }}-arm64v8 --os linux --arch arm64 --variant v8
        docker manifest push --purge ${REPO}:${{ github.sha }}
        if [ "$REF" = "master" ]; then
          DOCKER_TAG="latest"
        else
          if [ "$REF" = "" ]; then
            return
          fi
            DOCKER_TAG=$REF
        fi
        docker manifest create ${REPO}:${DOCKER_TAG} ${REPO}:${{ github.sha }}-amd64 ${REPO}:${{ github.sha }}-arm64v8 ${REPO}:${{ github.sha }}-arm32
        docker manifest annotate ${REPO}:${DOCKER_TAG} ${REPO}:${{ github.sha }}-arm32 --os linux --arch arm --variant v6
        docker manifest annotate ${REPO}:${DOCKER_TAG} ${REPO}:${{ github.sha }}-arm32 --os linux --arch arm --variant v7
        docker manifest annotate ${REPO}:${DOCKER_TAG} ${REPO}:${{ github.sha }}-arm64v8 --os linux --arch arm64 --variant v8
        docker manifest push --purge ${REPO}:${DOCKER_TAG}

